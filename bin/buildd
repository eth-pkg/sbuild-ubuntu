#!/usr/bin/perl
#
# buildd: daemon to automatically build packages
# Copyright © 1998 Roman Hodek <Roman.Hodek@informatik.uni-erlangen.de>
# Copyright © 2009 Roger Leigh <rleigh@debian.org>
# Copyright © 2005 Ryan Murray <rmurray@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
#######################################################################

use strict;
use warnings;

use Buildd qw(open_log close_log);
use Buildd::Conf;
use Buildd::Daemon;
use Sbuild::OptionsBase;

sub shutdown_fast ($);
sub shutdown($);
sub reread_config ($);
sub reopen_log ($);

my $conf = Buildd::Conf->new();
exit 1 if !defined($conf);
my $options = Sbuild::OptionsBase->new($conf, "buildd", "1");
exit 1 if !defined($options);
my $daemon = Buildd::Daemon->new($conf);
exit 1 if !defined($daemon);

my $log = open_log($daemon->get('Config'));
$daemon->set('Log Stream', $log);

# Global signal handling
foreach (qw(QUIT ILL TRAP ABRT BUS FPE USR2 SEGV PIPE XCPU XFSZ PWR)) {
    $SIG{$_} = \&shutdown_fast;
}
$SIG{'HUP'} = \&reopen_log;
$SIG{'USR1'} = \&reread_config;
$SIG{'INT'} = \&shutdown;
$SIG{'TERM'} = \&shutdown;

exit $daemon->run();

sub shutdown_fast ($) {
    my $signame = shift;
    $daemon->log("buildd ($$) killed by SIG$signame\n")
	if defined($daemon);
    unlink( $conf->get('PIDFILE') );
    exit 1;
}

sub shutdown ($) {
    my $signame = shift;

    $daemon->log("buildd ($$) received SIG$signame -- shutting down\n")
	if defined($daemon);

    if (defined $main::ssh_pid) {
	kill ( 15, $main::ssh_pid );
    }
    if (defined $main::sbuild_pid) {
	$daemon->log("Killing sbuild (pid=$main::sbuild_pid)\n")
	    if defined($daemon);
	kill( 15, $main::sbuild_pid );
	$daemon->log("Waiting max. 2 minutes for sbuild to finish\n")
	    if defined($daemon);
	$SIG{'ALRM'} = sub ($) { die "timeout\n"; };
	alarm( 120 );
	eval "waitpid( $main::sbuild_pid, 0 )";
	alarm( 0 );
	if ($@) {
	    $daemon->log("sbuild did not die!")
		if defined($daemon);
	}
	else {
	    $daemon->log("sbuild died normally")
		if defined($daemon);
	}
	unlink( "SBUILD-REDO-DUMPED" );
    }
    unlink( $conf->get('PIDFILE') );
    $daemon->log("exiting now\n");
    close_log($conf);
    exit 1;
}

sub reread_config ($) {
    my $signame = shift;

    $daemon->log("buildd ($$) received SIG$signame -- rereading configuration\n")
	if defined($daemon);

    $Buildd::Conf::reread_config = 1;
}

sub reopen_log ($) {
    my $signame = shift;

    $daemon->log("buildd ($$) received SIG$signame -- reopening logfile\n")
	if defined($daemon);

    Buildd::reopen_log($conf);
}

END {
    unlink( $conf->get('PIDFILE') )
	if (defined($conf) &&
	    defined($daemon) &&
	    $daemon->get('Daemon'));
}
