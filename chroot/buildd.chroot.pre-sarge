mirror_style release
download_style apt

work_out_debs () {

    if [ "$SUITE" = stable ]
    then
        required="base-files base-passwd bash bsdutils debconf debianutils diff dpkg e2fsprogs fileutils findutils grep gzip hostname libcap1 libc6 libdb2 libdb3 libgdbmg1 libncurses5 libpam-modules libpam-runtime libpam0g libperl5.6 libreadline4 libstdc++2.10-glibc2.2 login mawk mount ncurses-base ncurses-bin passwd perl-base sed shellutils slang1 sysvinit tar textutils util-linux"
    elif [ "$SUITE" = testing ]; then
        required="base-files base-passwd bash bsdutils coreutils debconf debianutils diff dpkg dselect e2fsprogs fileutils findutils grep gzip hostname libcap1 libc6 libdb1-compat libdb2 libdb3 libdb4.0 libgdbmg1 libncurses5 libpam-modules libpam-runtime libpam0g libperl5.6 libreadline4 libstdc++2.10-glibc2.2 login mawk mount ncurses-base ncurses-bin passwd perl-base sed slang1 sysvinit tar util-linux"
    else
        required="base-files base-passwd bash bsdutils coreutils debianutils diff dpkg dselect e2fslibs e2fsprogs findutils gcc-3.3-base grep gzip hostname initscripts libacl1 libattr1 libblkid1 libc6 libcap1 libcomerr2 libdb1-compat libdb3 libgcc1 libncurses5 libpam-modules libpam-runtime libpam0g libss2 libstdc++5 libuuid1 login makedev mawk mbr modutils mount ncurses-base ncurses-bin passwd perl-base procps sed slang1a-utf8 sysv-rc sysvinit tar util-linux zlib1g"
    fi

    base="apt binutils cpio cpp dpkg-dev gcc g++ make patch perl perl-modules ssmtp sudo"

    without_package () {
        echo "$2" | tr ' ' '\n' | grep -v "^$1$" | tr '\n' ' '
    }

    LIBC6=libc6
    
    if [ "$SUITE" = unstable ]; then
        case $ARCH in
            "alpha")
                required="$(without_package "libc6" "$required") libc6.1"
                base="$base gcc-3.2-base gcc-3.3-base gcc-3.2 gcc-3.3 g++-3.2 g++-3.3 cpp-3.2 cpp-3.3 libgcc1 libc6.1-dev libstdc++5-dev libstdc++5-3.3-dev fakeroot"
                LIBC6="libc6.1"
                ;;
            *)
		# default
		base="$base gcc-3.2-base gcc-3.3-base gcc-3.2 gcc-3.3 g++-3.2 g++-3.3 cpp-3.2 cpp-3.3 libgcc1 libc6-dev libstdc++5-dev libstdc++5-3.3-dev fakeroot"
		;;
        esac
    else
        case $ARCH in
            "alpha")
                required="$(without_package "libc6" "$required") libc6.1"
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6.1-dev libstdc++2.10-dev fakeroot"
                LIBC6="libc6.1"
                ;;
            "arm")
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev fakeroot"
                ;;
            "i386")
                required="$(without_package "libperl5.6" "$required")"
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev fakeroot"
                    ;;
            "ia64")
                required="$(without_package "libc6" "$required") libc6.1"
                base="$base gcc-2.96 gcc-2.96-base g++-2.96 cpp-2.96 libc6.1-dev libstdc++2.10-dev fakeroot"
                LIBC6="libc6.1"
                ;;
            "m68k")
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev fakeroot"
                ;;
            "powerpc")
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev fakeroot"
                ;;
            "sparc")
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev fakeroot sparc-utils makedev"
                ;;
            "mips")
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev"
                ;;
            "mipsel")
                base="$base gcc-2.95 g++-2.95 cpp-2.95 libc6-dev libstdc++2.10-dev"
                ;;
            "hppa")
                base="$base libstdc++3 gcc-3.0-base gcc-3.0 g++-3.0 cpp-3.0 libc6-dev libstdc++3-dev fakeroot libgcc1"
                required="$(without_package "libstdc++2.10-glibc2.2" "$required")"
                ;;
            *)
                # who knows?
                ;;
        esac
    fi

    all_debs="$required $base"
}

install_debs () {
    extract $required

    mkdir -p $TARGET/var/lib/dpkg
    echo -n >$TARGET/var/lib/dpkg/status
    echo -n >$TARGET/var/lib/dpkg/available

    setup_etc
    if [ ! -e $TARGET/etc/fstab ]; then
        echo '# UNCONFIGURED FSTAB FOR BASE SYSTEM' >$TARGET/etc/fstab
        chown 0.0 $TARGET/etc/fstab; chmod 644 $TARGET/etc/fstab
    fi

    setup_proc
    setup_devices

    if [ ! -e $TARGET/etc/ld.so.conf ]; then
        #warning "Creating empty ld.so.conf"
        info "(WARNING) Creating empty ld.so.conf"
        touch $TARGET/etc/ld.so.conf
        chown 0.0 $TARGET/etc/ld.so.conf
    fi
    in_target /sbin/ldconfig

    x_feign_install () {
        local pkg=$1
        local deb=$(debfor $pkg)
        local ver=$(
            ar -p $TARGET/$deb control.tar.gz | zcat |
                tar -O -xf - control ./control 2>/dev/null |
                sed -ne 's/^Version: *//Ip' | head -n 1
        )

        mkdir -p $TARGET/var/lib/dpkg/info

        cat >>$TARGET/var/lib/dpkg/status << EOF
Package: $pkg
Version: $ver
Status: install ok installed

EOF
        touch $TARGET/var/lib/dpkg/info/${pkg}.list
    }

    x_core_install () {
        in_target dpkg --force-depends --install $(debfor "$@")
    }

    x_feign_install dpkg

    export DEBIAN_FRONTEND=noninteractive

    info "Installing essential packages"

    x_core_install base-files base-passwd ldso
    x_core_install dpkg

    if [ ! -e $TARGET/etc/localtime ]; then
        ln -s /usr/share/zoneinfo/UTC $TARGET/etc/localtime
    fi

    if [ ! -e $TARGET/etc/hosts ]; then
        cp /etc/hosts $TARGET/etc
    fi

    x_core_install $LIBC6

    x_core_install perl-base
    x_core_install mawk
    x_core_install debconf

    repeat 5 in_target dpkg --force-depends --unpack $(debfor $required)
    # for p in $required; do
    #   repeat 20 in_target dpkg --force-depends --unpack $(debfor $p)
    # done

    mv $TARGET/sbin/start-stop-daemon $TARGET/sbin/start-stop-daemon.REAL
    cp $TARGET/bin/true $TARGET/sbin/start-stop-daemon

    setup_dselect_method apt
    on_exit "in_target_nofail umount /dev/pts"

    in_target dpkg --configure --pending --force-configure-any --force-depends

    info "Installing base packages"

    repeat 5 in_target dpkg --force-auto-select --force-overwrite \
        --force-confold --skip-same-version --install $(debfor $base)

    mv $TARGET/sbin/start-stop-daemon.REAL $TARGET/sbin/start-stop-daemon

    cp /etc/resolv.conf $TARGET/etc

    echo "# $SUITE" > $TARGET/etc/apt/sources.list
    echo "deb http://http.us.debian.org/debian/ $SUITE main non-free contrib" >> $TARGET/etc/apt/sources.list
    echo "deb-src http://http.us.debian.org/debian/ $SUITE main non-free contrib" >> $TARGET/etc/apt/sources.list
    echo "" >> $TARGET/etc/apt/sources.list
    echo "# $SUITE non-us" >> $TARGET/etc/apt/sources.list
    echo "deb http://non-us.debian.org/debian-non-US $SUITE/non-US main contrib non-free" >> $TARGET/etc/apt/sources.list
    echo "deb-src http://non-us.debian.org/debian-non-US $SUITE/non-US main contrib non-free" >> $TARGET/etc/apt/sources.list

    USER=root; GROUP=sbuild
    mkdir -p $TARGET/var/lib/sbuild/srcdep-lock $TARGET/build
    chown -R $USER:$GROUP $TARGET/var/lib/sbuild $TARGET/build
    chmod -R 02775 $TARGET/var/lib/sbuild

    info "Successfully set up chroot: $SUITE"

cat << EOF

-------------------------------------------------------------------------
Please add this line to /etc/fstab:

  none $TARGET/proc proc  defaults 0 0

and mount it:

  sudo mount $TARGET/proc

The add_sbuild_user script sets up the new chroot for a user:

  sudo /usr/lib/sbuild/add_sbuild_user $TARGET $SUITE <user>

-------------------------------------------------------------------------
EOF
exit 0
}

